{
  
    
        "post0": {
            "title": "Supreme Court Data",
            "content": "Pandas and plotting exercises . import pandas as pd . In Week 2, you used a dataset from the CORGIS website. You may have used either the Python, CSV, or JSON data files. . For this assignment, use the CSV file format for the same category of data that you used previously. . supremecourt_df = pd.read_csv(&#39;supreme_court.csv&#39;) . supremecourt_df . 3_judge_dc docket name citation.led citation.lexis citation.sct citation.us decision.authority decision.direction decision.dissent agrees ... decision.case.disposition decision.case.unusual decision.date.day decision.date.full decision.date.month decision.date.year voting.majority assigner.id voting.majority assigner.name voting.majority writer.id voting.majority writer.name . 0 True | 24 | HALLIBURTON OIL WELL CEMENTING CO. v. WALKER e... | 91 L. Ed. 3 | 1946 U.S. LEXIS 1724 | 67 S. Ct. 6 | 329 U.S. 1 | 4.0 | liberal | True | ... | reversed | True | 18.0 | 11/18/1946 | 11.0 | 1946.0 | 78.0 | HLBlack | 78.0 | HLBlack | . 1 True | 280 | FUNK BROTHERS SEED CO. v. KALO INOCULANT CO. | 92 L. Ed. 2d 588 | 1948 U.S. LEXIS 2842 | 68 S. Ct. 440 | 333 U.S. 127 | 7.0 | liberal | True | ... | reversed | True | 16.0 | 2/16/1948 | 2.0 | 1948.0 | 87.0 | FMVinson | 81.0 | WODouglas | . 2 True | 85 | YOUNG v. UNITED STATES ex rel. VUITTON ET FILS... | 95 L. Ed. 2d 740 | 1987 U.S. LEXIS 2261 | 107 S. Ct. 2124 | 481 U.S. 787 | 3.0 | liberal | True | ... | reversed | True | 26.0 | 5/26/1987 | 5.0 | 1987.0 | 92.0 | WJBrennan | 92.0 | WJBrennan | . 3 True | 71 | UNITED STATES v. GLAXO GROUP LTD. et al. | 35 L. Ed. 2d 104 | 1973 U.S. LEXIS 26 | 93 S. Ct. 861 | 410 U.S. 52 | 7.0 | liberal | True | ... | reversed | True | 22.0 | 1/22/1973 | 1.0 | 1973.0 | 99.0 | WEBurger | 95.0 | BRWhite | . 4 True | 250 | UNITED STATES v. NEW WRINKLE, INC. ET AL. | 96 L. Ed. 2d 417 | 1952 U.S. LEXIS 2811 | 72 S. Ct. 350 | 342 U.S. 371 | 4.0 | liberal | True | ... | reversed | True | 4.0 | 2/4/1952 | 2.0 | 1952.0 | 87.0 | FMVinson | 79.0 | SFReed | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2205 True | 7 | JAMES BENJAMIN PUCKETT v. UNITED STATES | 173 L. Ed. 2d 266 | 2009 U.S. LEXIS 2330 | 129 S. Ct. 1423 | 556 U.S. 129 | 7.0 | conservative | True | ... | affirmed (includes modified) | True | 25.0 | 3/25/2009 | 3.0 | 2009.0 | 111.0 | JGRoberts | 105.0 | AScalia | . 2206 True | 10 | MONROE ACE SETSER, PETITIONER v. UNITED STATES | 182 L. Ed. 2d 455 | 2012 U.S. LEXIS 2538 | 132 S. Ct. 1463 | 566 U.S. 231 | 4.0 | liberal | True | ... | affirmed (includes modified) | True | 28.0 | 3/28/2012 | 3.0 | 2012.0 | 111.0 | JGRoberts | 105.0 | AScalia | . 2207 True | 82 | RUSSELLO v. UNITED STATES | 78 L. Ed. 2d 17 | 1983 U.S. LEXIS 9 | 104 S. Ct. 296 | 464 U.S. 16 | 4.0 | conservative | True | ... | affirmed (includes modified) | True | 1.0 | 11/1/1983 | 11.0 | 1983.0 | 99.0 | WEBurger | 100.0 | HABlackmun | . 2208 True | 7 | ABBATE et al. v. UNITED STATES | 3 L. Ed. 2d 729 | 1959 U.S. LEXIS 1264 | 79 S. Ct. 666 | 359 U.S. 187 | 1.0 | conservative | True | ... | affirmed (includes modified) | True | 30.0 | 3/30/1959 | 3.0 | 1959.0 | 80.0 | FFrankfurter | 92.0 | WJBrennan | . 2209 True | 79 | ALBERNAZ et al. v. UNITED STATES | 67 L. Ed. 2d 275 | 1981 U.S. LEXIS 78 | 101 S. Ct. 1137 | 450 U.S. 333 | 1.0 | conservative | True | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2210 rows × 56 columns . # Listed above, or: supremecourt_df.shape . (2210, 56) . supremecourt_df.columns . Index([&#39;3_judge_dc&#39;, &#39;docket&#39;, &#39;name&#39;, &#39;citation.led&#39;, &#39;citation.lexis&#39;, &#39;citation.sct&#39;, &#39;citation.us&#39;, &#39;decision.authority&#39;, &#39;decision.direction&#39;, &#39;decision.dissent agrees&#39;, &#39;decision.jurisdiction&#39;, &#39;decision.precedent altered?&#39;, &#39;decision.term&#39;, &#39;decision.type&#39;, &#39;decision.unconstitutional&#39;, &#39;decision.winning party&#39;, &#39;id.case&#39;, &#39;id.case issues&#39;, &#39;id.docket&#39;, &#39;id.vote&#39;, &#39;issue.area&#39;, &#39;issue.id&#39;, &#39;issue.text&#39;, &#39;laws.id&#39;, &#39;laws.type&#39;, &#39;lower court.direction&#39;, &#39;lower court.disagreement?&#39;, &#39;lower court.disposition&#39;, &#39;lower court.reasons&#39;, &#39;natural court.chief&#39;, &#39;natural court.id&#39;, &#39;natural court.period&#39;, &#39;origin.id&#39;, &#39;origin.name&#39;, &#39;source.id&#39;, &#39;source.name&#39;, &#39;voting.majority&#39;, &#39;voting.minority&#39;, &#39;voting.split on second&#39;, &#39;voting.unclear&#39;, &#39;arguments.petitioner.entity&#39;, &#39;arguments.petitioner.id&#39;, &#39;arguments.respondent.entity&#39;, &#39;arguments.respondent.id&#39;, &#39;decision.admin action.agency&#39;, &#39;decision.admin action.id&#39;, &#39;decision.case.disposition&#39;, &#39;decision.case.unusual&#39;, &#39;decision.date.day&#39;, &#39;decision.date.full&#39;, &#39;decision.date.month&#39;, &#39;decision.date.year&#39;, &#39;voting.majority assigner.id&#39;, &#39;voting.majority assigner.name&#39;, &#39;voting.majority writer.id&#39;, &#39;voting.majority writer.name&#39;], dtype=&#39;object&#39;) . supremecourt_df.dtypes . 3_judge_dc bool docket int64 name object citation.led object citation.lexis object citation.sct object citation.us object decision.authority float64 decision.direction object decision.dissent agrees bool decision.jurisdiction object decision.precedent altered? bool decision.term int64 decision.type object decision.unconstitutional object decision.winning party object id.case object id.case issues object id.docket object id.vote object issue.area object issue.id int64 issue.text object laws.id int64 laws.type object lower court.direction object lower court.disagreement? bool lower court.disposition object lower court.reasons object natural court.chief object natural court.id int64 natural court.period int64 origin.id int64 origin.name object source.id int64 source.name object voting.majority float64 voting.minority float64 voting.split on second object voting.unclear object arguments.petitioner.entity object arguments.petitioner.id float64 arguments.respondent.entity object arguments.respondent.id float64 decision.admin action.agency object decision.admin action.id float64 decision.case.disposition object decision.case.unusual object decision.date.day float64 decision.date.full object decision.date.month float64 decision.date.year float64 voting.majority assigner.id float64 voting.majority assigner.name object voting.majority writer.id float64 voting.majority writer.name object dtype: object . supremecourt_df.head(2) . 3_judge_dc docket name citation.led citation.lexis citation.sct citation.us decision.authority decision.direction decision.dissent agrees ... decision.case.disposition decision.case.unusual decision.date.day decision.date.full decision.date.month decision.date.year voting.majority assigner.id voting.majority assigner.name voting.majority writer.id voting.majority writer.name . 0 True | 24 | HALLIBURTON OIL WELL CEMENTING CO. v. WALKER e... | 91 L. Ed. 3 | 1946 U.S. LEXIS 1724 | 67 S. Ct. 6 | 329 U.S. 1 | 4.0 | liberal | True | ... | reversed | True | 18.0 | 11/18/1946 | 11.0 | 1946.0 | 78.0 | HLBlack | 78.0 | HLBlack | . 1 True | 280 | FUNK BROTHERS SEED CO. v. KALO INOCULANT CO. | 92 L. Ed. 2d 588 | 1948 U.S. LEXIS 2842 | 68 S. Ct. 440 | 333 U.S. 127 | 7.0 | liberal | True | ... | reversed | True | 16.0 | 2/16/1948 | 2.0 | 1948.0 | 87.0 | FMVinson | 81.0 | WODouglas | . 2 rows × 56 columns . supremecourt_df.tail(2) . 3_judge_dc docket name citation.led citation.lexis citation.sct citation.us decision.authority decision.direction decision.dissent agrees ... decision.case.disposition decision.case.unusual decision.date.day decision.date.full decision.date.month decision.date.year voting.majority assigner.id voting.majority assigner.name voting.majority writer.id voting.majority writer.name . 2208 True | 7 | ABBATE et al. v. UNITED STATES | 3 L. Ed. 2d 729 | 1959 U.S. LEXIS 1264 | 79 S. Ct. 666 | 359 U.S. 187 | 1.0 | conservative | True | ... | affirmed (includes modified) | True | 30.0 | 3/30/1959 | 3.0 | 1959.0 | 80.0 | FFrankfurter | 92.0 | WJBrennan | . 2209 True | 79 | ALBERNAZ et al. v. UNITED STATES | 67 L. Ed. 2d 275 | 1981 U.S. LEXIS 78 | 101 S. Ct. 1137 | 450 U.S. 333 | 1.0 | conservative | True | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2 rows × 56 columns . supremecourt_df.describe(include=&#39;all&#39;) . 3_judge_dc docket name citation.led citation.lexis citation.sct citation.us decision.authority decision.direction decision.dissent agrees ... decision.case.disposition decision.case.unusual decision.date.day decision.date.full decision.date.month decision.date.year voting.majority assigner.id voting.majority assigner.name voting.majority writer.id voting.majority writer.name . count 2210 | 2210.000000 | 2210 | 2210 | 2210 | 2210 | 2210 | 2210.000000 | 2210 | 2210 | ... | 2209 | 2209 | 2209.000000 | 2209 | 2209.000000 | 2209.000000 | 2209.000000 | 2209 | 2209.000000 | 2209 | . unique 1 | NaN | 2191 | 2203 | 2210 | 2203 | 2185 | NaN | 3 | 1 | ... | 2 | 1 | NaN | 1294 | NaN | NaN | NaN | 23 | NaN | 39 | . top True | NaN | TRAVIS v. UNITED STATES | 14 L. Ed. 2d 151 | 1946 U.S. LEXIS 1724 | 75 S. Ct. 576 | unspecified | NaN | liberal | True | ... | reversed | True | NaN | 6/12/1967 | NaN | NaN | NaN | WEBurger | NaN | Unspecified | . freq 2210 | NaN | 2 | 3 | 1 | 2 | 26 | NaN | 1118 | 2210 | ... | 1977 | 2209 | NaN | 16 | NaN | NaN | NaN | 674 | NaN | 302 | . mean NaN | 213.087330 | NaN | NaN | NaN | NaN | NaN | 3.459276 | NaN | NaN | ... | NaN | NaN | 16.119058 | NaN | 5.148483 | 1974.692168 | 95.270258 | NaN | 97.649163 | NaN | . std NaN | 2801.568224 | NaN | NaN | NaN | NaN | NaN | 1.660506 | NaN | NaN | ... | NaN | NaN | 8.562475 | NaN | 3.059591 | 17.668581 | 8.237794 | NaN | 11.750407 | NaN | . min NaN | 0.000000 | NaN | NaN | NaN | NaN | NaN | 1.000000 | NaN | NaN | ... | NaN | NaN | 1.000000 | NaN | 1.000000 | 1946.000000 | 74.000000 | NaN | 78.000000 | NaN | . 25% NaN | 70.000000 | NaN | NaN | NaN | NaN | NaN | 2.000000 | NaN | NaN | ... | NaN | NaN | 9.000000 | NaN | 3.000000 | 1961.000000 | 90.000000 | NaN | 89.000000 | NaN | . 50% NaN | 82.000000 | NaN | NaN | NaN | NaN | NaN | 4.000000 | NaN | NaN | ... | NaN | NaN | 17.000000 | NaN | 5.000000 | 1974.000000 | 99.000000 | NaN | 99.000000 | NaN | . 75% NaN | 109.000000 | NaN | NaN | NaN | NaN | NaN | 4.000000 | NaN | NaN | ... | NaN | NaN | 23.000000 | NaN | 6.000000 | 1986.000000 | 99.000000 | NaN | 105.000000 | NaN | . max NaN | 131318.000000 | NaN | NaN | NaN | NaN | NaN | 7.000000 | NaN | NaN | ... | NaN | NaN | 31.000000 | NaN | 12.000000 | 2020.000000 | 117.000000 | NaN | 117.000000 | NaN | . 11 rows × 56 columns . supremecourt_df[&#39;name&#39;] . 0 HALLIBURTON OIL WELL CEMENTING CO. v. WALKER e... 1 FUNK BROTHERS SEED CO. v. KALO INOCULANT CO. 2 YOUNG v. UNITED STATES ex rel. VUITTON ET FILS... 3 UNITED STATES v. GLAXO GROUP LTD. et al. 4 UNITED STATES v. NEW WRINKLE, INC. ET AL. ... 2205 JAMES BENJAMIN PUCKETT v. UNITED STATES 2206 MONROE ACE SETSER, PETITIONER v. UNITED STATES 2207 RUSSELLO v. UNITED STATES 2208 ABBATE et al. v. UNITED STATES 2209 ALBERNAZ et al. v. UNITED STATES Name: name, Length: 2210, dtype: object . supremecourt_df.plot.line(x=&#39;voting.majority&#39;) . &lt;AxesSubplot:xlabel=&#39;voting.majority&#39;&gt; . supremecourt_df.plot.line(&#39;docket&#39;) . &lt;AxesSubplot:xlabel=&#39;docket&#39;&gt; . supremecourt_df.loc[[0,1,2,3,4,5,6,7,8,9,10],[&#39;voting.majority&#39;]] . voting.majority . 0 8.0 | . 1 7.0 | . 2 5.0 | . 3 6.0 | . 4 8.0 | . 5 9.0 | . 6 9.0 | . 7 8.0 | . 8 5.0 | . 9 9.0 | . 10 6.0 | . # as well as the matching 10 elements of a different column that has interesting text supremecourt_df.loc[[0,1,2,3,4,5,6,7,8,9,10],[&#39;voting.majority&#39;,&#39;name&#39;]] . voting.majority name . 0 8.0 | HALLIBURTON OIL WELL CEMENTING CO. v. WALKER e... | . 1 7.0 | FUNK BROTHERS SEED CO. v. KALO INOCULANT CO. | . 2 5.0 | YOUNG v. UNITED STATES ex rel. VUITTON ET FILS... | . 3 6.0 | UNITED STATES v. GLAXO GROUP LTD. et al. | . 4 8.0 | UNITED STATES v. NEW WRINKLE, INC. ET AL. | . 5 9.0 | SAKRAIDA v. AG PRO, INC. | . 6 9.0 | McCULLOUGH v. KAMMERER CORPORATION ET AL. | . 7 8.0 | BRULOTTE et al. v. THYS CO. | . 8 5.0 | SONY CORPORATION OF AMERICA et al. v. UNIVERSA... | . 9 9.0 | COMPCO CORPORATION v. DAY-BRITE LIGHTING, INC. | . 10 6.0 | ARO MANUFACTURING CO., INC., et al. v. CONVERT... | . # and make a bar plot with the text values horizontally and the numeric values as the bar heights # I get to this point and then I keep getting a pop-up saying the kernel has died. I&#39;ve tried closing # and re-opening the notebook. I think I messed up when trying to assign the values to a new dataframe # variable (see below error). . a = supremecourt_df.loc[[0,1,2,3,4,5,6,7,8,9],[&#39;voting.majority&#39;,&#39;name&#39;]] a.plot(kind = &#39;bar&#39;, x=&#39;name&#39;, y=&#39;voting.majority&#39;) . &lt;AxesSubplot:xlabel=&#39;name&#39;&gt; . a.plot(kind = &#39;barh&#39;, x=&#39;name&#39;, y=&#39;voting.majority&#39;) . &lt;AxesSubplot:ylabel=&#39;name&#39;&gt; . # and change at least two aesthetic elements (colors, labels, titles, ...) a.plot(kind = &#39;barh&#39;, x=&#39;name&#39;, y=&#39;voting.majority&#39;, figsize=(12,6), color=&#39;y&#39;) . &lt;AxesSubplot:ylabel=&#39;name&#39;&gt; . Free form section . Choose another type of plot that interests you from the pandas.DataFrame.plot documentation [look at the &#39;kind&#39; parameter] and make a new plot of your dataset values using the plot type | . c = supremecourt_df.groupby(&#39;name&#39;)[[&#39;voting.majority&#39;,&#39;natural court.period&#39;]].sum() c.plot(kind = &#39;scatter&#39;, x= &#39;voting.majority&#39;, y=&#39;natural court.period&#39;) . &lt;AxesSubplot:xlabel=&#39;voting.majority&#39;, ylabel=&#39;natural court.period&#39;&gt; . Copy some of your analysis from the Week 2 assignment into new cells below | Clean them up if desired, and make sure that you translate them to work with your new pandas dataframe structure here if needed | Create several plots to complement and extend your analysis | . w = supremecourt_df.groupby(&#39;decision.direction&#39;)[[&#39;issue.area&#39;]].sum() w.sort_values(by=&#39;decision.direction&#39;,ascending=False) . issue.area . decision.direction . unspecifiable Interstate RelationsMiscellaneousInterstate Re... | . liberal Economic ActivityEconomic ActivityCriminal Pro... | . conservative Judicial PowerCriminal ProcedureFederalismJudi... | .",
            "url": "https://lilykohn.github.io/testblog/fastpages/jupyter/2022/03/10/.html",
            "relUrl": "/fastpages/jupyter/2022/03/10/.html",
            "date": " • Mar 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lilykohn.github.io/testblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lilykohn.github.io/testblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lilykohn.github.io/testblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lilykohn.github.io/testblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}